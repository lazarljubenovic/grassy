@import 'true';
@import '../src/fixed-grid';

@include test-module('Fixed Grid') {

  @include test-module('no additional parameters') {
    @include test('single column') {
      @include assert {
        @include output {
          @include fixed-grid(1);
        }
        @include expect {
          display: flex; flex-direction: column;
          > * { width: 100% }
          > :not(:last-child) { margin-bottom: 1em }
        }
      }
    }
    @include test('two columns') {
      @include assert {
        @include output {
          @include fixed-grid(2);
        }
        @include expect {
          display: flex; flex-wrap: wrap;
          > * { width: calc((100% - 1em) / 2); margin-bottom: 1em }
          > *:not(:nth-child(2n)) { margin-right: 1em }
          > *:nth-last-child(1):nth-child(2n + 1) { margin-bottom: 0 }
          > *:nth-last-child(2):nth-child(2n + 1) { margin-bottom: 0 }
          > *:nth-last-child(1):nth-child(2n + 2) { margin-bottom: 0 }
        }
      }
    }
    @include test('three columns') {
      @include assert {
        @include output {
          @include fixed-grid(3);
        }
        @include expect {
          display: flex; flex-wrap: wrap;
          > * { width: calc((100% - 2em) / 3); margin-bottom: 1em }
          > *:not(:nth-child(3n)) { margin-right: 1em }
          > *:nth-last-child(1):nth-child(3n + 1) { margin-bottom: 0 }
          > *:nth-last-child(2):nth-child(3n + 1) { margin-bottom: 0 }
          > *:nth-last-child(1):nth-child(3n + 2) { margin-bottom: 0 }
          > *:nth-last-child(3):nth-child(3n + 1) { margin-bottom: 0 }
          > *:nth-last-child(2):nth-child(3n + 2) { margin-bottom: 0 }
          > *:nth-last-child(1):nth-child(3n + 3) { margin-bottom: 0 }
        }
      }
    }
    @include test('four columns') {
      @include assert {
        @include output {
          @include fixed-grid(4);
        }
        @include expect {
          display: flex; flex-wrap: wrap;
          > * { width: calc((100% - 3em) / 4); margin-bottom: 1em }
          > *:not(:nth-child(4n)) { margin-right: 1em }
          > *:nth-last-child(1):nth-child(4n + 1) { margin-bottom: 0 }
          > *:nth-last-child(2):nth-child(4n + 1) { margin-bottom: 0 }
          > *:nth-last-child(1):nth-child(4n + 2) { margin-bottom: 0 }
          > *:nth-last-child(3):nth-child(4n + 1) { margin-bottom: 0 }
          > *:nth-last-child(2):nth-child(4n + 2) { margin-bottom: 0 }
          > *:nth-last-child(1):nth-child(4n + 3) { margin-bottom: 0 }
          > *:nth-last-child(4):nth-child(4n + 1) { margin-bottom: 0 }
          > *:nth-last-child(3):nth-child(4n + 2) { margin-bottom: 0 }
          > *:nth-last-child(2):nth-child(4n + 3) { margin-bottom: 0 }
          > *:nth-last-child(1):nth-child(4n + 4) { margin-bottom: 0 }
        }
      }
    }
  }

  @include test-module('$distribute-dangling') {
    @include test('single column') {
      @include assert {
        @include output {
          @include fixed-grid(1, $distribute-dangling: true);
        }
        @include expect {
          display: flex; flex-direction: column;
          > * { width: 100% }
          > :not(:last-child) { margin-bottom: 1em }
        }
      }
    }
    @include test('two columns') {
      @include assert {
        @include output {
          @include fixed-grid(2, $distribute-dangling: true);
        }
        @include expect {
          display: flex; flex-wrap: wrap;
          > * { width: calc((100% - 1em) / 2); margin-bottom: 1em }
          > *:not(:nth-child(2n)) { margin-right: 1em }
          > *:nth-last-child(1):nth-child(2n + 1) { margin-bottom: 0 }
          > *:nth-last-child(2):nth-child(2n + 1) { margin-bottom: 0 }
          > *:nth-last-child(1):nth-child(2n + 2) { margin-bottom: 0 }
          > *:last-child { margin-right: 0 }
          > *:nth-last-child(1):nth-child(2n + 1) { width: calc((100% - 0em) / 1) }
          > *:nth-last-child(2):nth-child(2n + 1) { width: calc((100% - 1em) / 2) }
          > *:nth-last-child(1):nth-child(2n + 2) { width: calc((100% - 1em) / 2) }
        }
      }
    }
    @include test('three columns') {
      @include assert {
        @include output {
          @include fixed-grid(3, $distribute-dangling: true);
        }
        @include expect {
          display: flex; flex-wrap: wrap;
          > * { width: calc((100% - 2em) / 3); margin-bottom: 1em }
          > *:not(:nth-child(3n)) { margin-right: 1em }
          > *:nth-last-child(1):nth-child(3n + 1) { margin-bottom: 0 }
          > *:nth-last-child(2):nth-child(3n + 1) { margin-bottom: 0 }
          > *:nth-last-child(1):nth-child(3n + 2) { margin-bottom: 0 }
          > *:nth-last-child(3):nth-child(3n + 1) { margin-bottom: 0 }
          > *:nth-last-child(2):nth-child(3n + 2) { margin-bottom: 0 }
          > *:nth-last-child(1):nth-child(3n + 3) { margin-bottom: 0 }
          > *:last-child { margin-right: 0 }
          > *:nth-last-child(1):nth-child(3n + 1) { width: calc((100% - 0em) / 1) }
          > *:nth-last-child(2):nth-child(3n + 1) { width: calc((100% - 1em) / 2) }
          > *:nth-last-child(1):nth-child(3n + 2) { width: calc((100% - 1em) / 2) }
          > *:nth-last-child(3):nth-child(3n + 1) { width: calc((100% - 2em) / 3) }
          > *:nth-last-child(2):nth-child(3n + 2) { width: calc((100% - 2em) / 3) }
          > *:nth-last-child(1):nth-child(3n + 3) { width: calc((100% - 2em) / 3) }
        }
      }
    }
    @include test('four columns') {
      @include assert {
        @include output {
          @include fixed-grid(4, $distribute-dangling: true);
        }
        @include expect {
          display: flex; flex-wrap: wrap;
          > * { width: calc((100% - 3em) / 4); margin-bottom: 1em }
          > *:not(:nth-child(4n)) { margin-right: 1em }
          > *:nth-last-child(1):nth-child(4n + 1) { margin-bottom: 0 }
          > *:nth-last-child(2):nth-child(4n + 1) { margin-bottom: 0 }
          > *:nth-last-child(1):nth-child(4n + 2) { margin-bottom: 0 }
          > *:nth-last-child(3):nth-child(4n + 1) { margin-bottom: 0 }
          > *:nth-last-child(2):nth-child(4n + 2) { margin-bottom: 0 }
          > *:nth-last-child(1):nth-child(4n + 3) { margin-bottom: 0 }
          > *:nth-last-child(4):nth-child(4n + 1) { margin-bottom: 0 }
          > *:nth-last-child(3):nth-child(4n + 2) { margin-bottom: 0 }
          > *:nth-last-child(2):nth-child(4n + 3) { margin-bottom: 0 }
          > *:nth-last-child(1):nth-child(4n + 4) { margin-bottom: 0 }
          > *:last-child { margin-right: 0 }
          > *:nth-last-child(1):nth-child(4n + 1) { width: calc((100% - 0em) / 1) }
          > *:nth-last-child(2):nth-child(4n + 1) { width: calc((100% - 1em) / 2) }
          > *:nth-last-child(1):nth-child(4n + 2) { width: calc((100% - 1em) / 2) }
          > *:nth-last-child(3):nth-child(4n + 1) { width: calc((100% - 2em) / 3) }
          > *:nth-last-child(2):nth-child(4n + 2) { width: calc((100% - 2em) / 3) }
          > *:nth-last-child(1):nth-child(4n + 3) { width: calc((100% - 2em) / 3) }
          > *:nth-last-child(4):nth-child(4n + 1) { width: calc((100% - 3em) / 4) }
          > *:nth-last-child(3):nth-child(4n + 2) { width: calc((100% - 3em) / 4) }
          > *:nth-last-child(2):nth-child(4n + 3) { width: calc((100% - 3em) / 4) }
          > *:nth-last-child(1):nth-child(4n + 4) { width: calc((100% - 3em) / 4) }
        }
      }
    }
  }

  @include test-module('with $dangling-at-beginning: true') {
    @include test('single column') {
      @include assert {
        @include output {
          @include fixed-grid(1, $distribute-dangling: true, $dangling-at-beginning: true);
        }
        @include expect {
          display: flex; flex-direction: column;
          > * { width: 100% }
          > :not(:last-child) { margin-bottom: 1em }
        }
      }
    }
    @include test('two columns') {
      @include assert {
        @include output {
          @include fixed-grid(2, $distribute-dangling: true, $dangling-at-beginning: true);
        }
        @include expect {
          display: flex; flex-wrap: wrap;
          > * { width: calc((100% - 1em) / 2); margin-bottom: 1em }
          > *:not(:nth-last-child(2n + 1)) { margin-right: 1em }
          > *:nth-last-child(1):nth-child(2n + 1) { margin-bottom: 0 }
          > *:nth-last-child(2):nth-child(2n + 1) { margin-bottom: 0 }
          > *:nth-last-child(1):nth-child(2n + 2) { margin-bottom: 0 }
          > *:nth-last-child(1):not(:nth-child(1)) { margin-bottom: 0 }
          > *:nth-last-child(2):not(:nth-child(1)) { margin-bottom: 0 }
          > *:nth-last-child(2):not(:nth-child(2)) { margin-bottom: 0 }
          > *:nth-child(1):nth-last-child(2n + 1) { margin-right: 0 }
          > *:nth-child(1):nth-last-child(2n + 1) { width: calc((100% - 0em) / 1) }
          > *:nth-child(2):nth-last-child(2n + 1) { margin-right: 0 }
          > *:nth-child(2):nth-last-child(2n + 1) { width: calc((100% - 1em) / 2) }
          > *:nth-child(1):nth-last-child(2n + 2) { width: calc((100% - 1em) / 2) }
        }
      }
    }
    @include test('three columns') {
      @include assert {
        @include output {
          @include fixed-grid(3, $distribute-dangling: true, $dangling-at-beginning: true);
        }
        @include expect {
          display: flex; flex-wrap: wrap;
          > * { width: calc((100% - 2em) / 3); margin-bottom: 1em }
          > *:not(:nth-last-child(3n + 1)) { margin-right: 1em }
          > *:nth-last-child(1):nth-child(3n + 1) { margin-bottom: 0 }
          > *:nth-last-child(2):nth-child(3n + 1) { margin-bottom: 0 }
          > *:nth-last-child(1):nth-child(3n + 2) { margin-bottom: 0 }
          > *:nth-last-child(3):nth-child(3n + 1) { margin-bottom: 0 }
          > *:nth-last-child(2):nth-child(3n + 2) { margin-bottom: 0 }
          > *:nth-last-child(1):nth-child(3n + 3) { margin-bottom: 0 }
          > *:nth-last-child(1):not(:nth-child(1)) { margin-bottom: 0 }
          > *:nth-last-child(2):not(:nth-child(1)) { margin-bottom: 0 }
          > *:nth-last-child(2):not(:nth-child(2)) { margin-bottom: 0 }
          > *:nth-last-child(3):not(:nth-child(1)) { margin-bottom: 0 }
          > *:nth-last-child(3):not(:nth-child(2)) { margin-bottom: 0 }
          > *:nth-last-child(3):not(:nth-child(3)) { margin-bottom: 0 }
          > *:nth-child(1):nth-last-child(3n + 1) { margin-right: 0 }
          > *:nth-child(1):nth-last-child(3n + 1) { width: calc((100% - 0em) / 1) }
          > *:nth-child(2):nth-last-child(3n + 1) { margin-right: 0 }
          > *:nth-child(2):nth-last-child(3n + 1) { width: calc((100% - 1em) / 2) }
          > *:nth-child(1):nth-last-child(3n + 2) { width: calc((100% - 1em) / 2) }
          > *:nth-child(3):nth-last-child(3n + 1) { margin-right: 0 }
          > *:nth-child(3):nth-last-child(3n + 1) { width: calc((100% - 2em) / 3) }
          > *:nth-child(2):nth-last-child(3n + 2) { width: calc((100% - 2em) / 3) }
          > *:nth-child(1):nth-last-child(3n + 3) { width: calc((100% - 2em) / 3) }
        }
      }
    }
    @include test('four columns') {
      @include assert {
        @include output {
          @include fixed-grid(4, $distribute-dangling: true, $dangling-at-beginning: true);
        }
        @include expect {
          display: flex; flex-wrap: wrap;
          > * { width: calc((100% - 3em) / 4); margin-bottom: 1em }
          > *:not(:nth-last-child(4n + 1)) { margin-right: 1em }
          > *:nth-last-child(1):nth-child(4n + 1) { margin-bottom: 0 }
          > *:nth-last-child(2):nth-child(4n + 1) { margin-bottom: 0 }
          > *:nth-last-child(1):nth-child(4n + 2) { margin-bottom: 0 }
          > *:nth-last-child(3):nth-child(4n + 1) { margin-bottom: 0 }
          > *:nth-last-child(2):nth-child(4n + 2) { margin-bottom: 0 }
          > *:nth-last-child(1):nth-child(4n + 3) { margin-bottom: 0 }
          > *:nth-last-child(4):nth-child(4n + 1) { margin-bottom: 0 }
          > *:nth-last-child(3):nth-child(4n + 2) { margin-bottom: 0 }
          > *:nth-last-child(2):nth-child(4n + 3) { margin-bottom: 0 }
          > *:nth-last-child(1):nth-child(4n + 4) { margin-bottom: 0 }
          > *:nth-last-child(1):not(:nth-child(1)) { margin-bottom: 0 }
          > *:nth-last-child(2):not(:nth-child(1)) { margin-bottom: 0 }
          > *:nth-last-child(2):not(:nth-child(2)) { margin-bottom: 0 }
          > *:nth-last-child(3):not(:nth-child(1)) { margin-bottom: 0 }
          > *:nth-last-child(3):not(:nth-child(2)) { margin-bottom: 0 }
          > *:nth-last-child(3):not(:nth-child(3)) { margin-bottom: 0 }
          > *:nth-last-child(4):not(:nth-child(1)) { margin-bottom: 0 }
          > *:nth-last-child(4):not(:nth-child(2)) { margin-bottom: 0 }
          > *:nth-last-child(4):not(:nth-child(3)) { margin-bottom: 0 }
          > *:nth-last-child(4):not(:nth-child(4)) { margin-bottom: 0 }
          > *:nth-child(1):nth-last-child(4n + 1) { margin-right: 0 }
          > *:nth-child(1):nth-last-child(4n + 1) { width: calc((100% - 0em) / 1) }
          > *:nth-child(2):nth-last-child(4n + 1) { margin-right: 0 }
          > *:nth-child(2):nth-last-child(4n + 1) { width: calc((100% - 1em) / 2) }
          > *:nth-child(1):nth-last-child(4n + 2) { width: calc((100% - 1em) / 2) }
          > *:nth-child(3):nth-last-child(4n + 1) { margin-right: 0 }
          > *:nth-child(3):nth-last-child(4n + 1) { width: calc((100% - 2em) / 3) }
          > *:nth-child(2):nth-last-child(4n + 2) { width: calc((100% - 2em) / 3) }
          > *:nth-child(1):nth-last-child(4n + 3) { width: calc((100% - 2em) / 3) }
          > *:nth-child(4):nth-last-child(4n + 1) { margin-right: 0 }
          > *:nth-child(4):nth-last-child(4n + 1) { width: calc((100% - 3em) / 4) }
          > *:nth-child(3):nth-last-child(4n + 2) { width: calc((100% - 3em) / 4) }
          > *:nth-child(2):nth-last-child(4n + 3) { width: calc((100% - 3em) / 4) }
          > *:nth-child(1):nth-last-child(4n + 4) { width: calc((100% - 3em) / 4) }
        }
      }
    }
  }

}
